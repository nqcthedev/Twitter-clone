openapi: 3.0.3
info:
  title: Twitter clone - Open API 2024
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Các API liên quan đến User
paths:
  /users/login:
    post:
      tags:
        - users
      summary: Login
      description: Login to application
      operationId: login
      requestBody:
        description: Info login to application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login Successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login Success
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '404':
          description: Not found
        '422':
          description: Validation exception
  /users/me:
    get:
      tags:
        - users
      summary: Get user profile
      description: Retrieve the profile of the current user
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        200:
          description: Get me Successfull
          content:
            appliacation/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get my profile success
                  result:
                    $ref: '#/components/schemas/UserProfile'

components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: tdemo017+8@gmail.com
        password:
          type: string
          example: 'Cuongdola1@'
    SuccessAuthentication:
      type: object
      properties:
        result:
          type: object
          properties:
            access_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVmMmFlMWJmZWQ3MmE0ZDVmMmVmMWMyIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MTQyOTI4MjcsImV4cCI6MTcxNDI5MzcyN30.n4DMESBCHTm00hxgRmlyManklHIGsYPe-UEye2WbF6s
            refresh_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVmMmFlMWJmZWQ3MmE0ZDVmMmVmMWMyIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MTQyOTI4MjcsImV4cCI6MTcyMjkzMjgyN30.VXZFK_EJMMUp6UNXl7L3JB6bLknVoIxpdiC_L_PK9Yo
    UserProfile:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: '65f2ae1bfed72a4d5f2ef1c2'
        name:
          type: string
          example: 'dola98'
        email:
          type: string
          example: 'tdemo017+8@gmail.com'
        date_of_birth:
          type: string
          format: date-time
          example: '2023-04-08T10:17:31.096Z'
        created_at:
          type: string
          format: date-time
          example: '2024-03-14T07:58:19.213Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-03-14T08:01:01.766Z'
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        twitter_circle:
          type: array
          items:
            type: string
          example: [65f2ae1bfed72a4d5f2ef1c2, 65f2ae1bfed72a4d5f2ef1c2, 65f2ae1bfed72a4d5f2ef1c2]
        bio:
          type: string
          example: ''
        location:
          type: string
          example: ''
        website:
          type: string
          example: ''
        username:
          type: string
          example: 'user65f2ae1bfed72a4d5f2ef1c2'
        avatar:
          type: string
          example: 'http://localhost:4000/images/avatars/johndoe.jpg'
        cover_photo:
          type: string
          example: 'http://localhost:4000/images/avatars/cover_photo.jpg'
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verify, Banned]
      example: 1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
